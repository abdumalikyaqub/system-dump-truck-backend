// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MonitoringDumpTruck.Models;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MonitoringDumpTruck.Migrations
{
    [DbContext(typeof(MonitoringContext))]
    partial class MonitoringContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("mining_truck")
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MonitoringDumpTruck.Models.Entities.DumpTruck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BodyVolume")
                        .HasColumnType("integer");

                    b.Property<string>("EngineModel")
                        .HasColumnType("text");

                    b.Property<int?>("FullMass")
                        .HasColumnType("integer");

                    b.Property<string>("GosNumber")
                        .HasColumnType("text");

                    b.Property<string>("KPP")
                        .HasColumnType("text");

                    b.Property<int?>("LoadCapacity")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxFuel")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxSpeed")
                        .HasColumnType("integer");

                    b.Property<int?>("Mileage")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<string>("TOIR")
                        .HasColumnType("text");

                    b.Property<string>("TireModel")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("YearIssue")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("dump_trucks", "mining_truck");
                });

            modelBuilder.Entity("MonitoringDumpTruck.Models.Entities.Filling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DumpTruckId")
                        .HasColumnType("integer");

                    b.Property<double?>("InitialVolume")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("DumpTruckId");

                    b.ToTable("fillings", "mining_truck");
                });

            modelBuilder.Entity("MonitoringDumpTruck.Models.Entities.Pointer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DumpTruckId")
                        .HasColumnType("integer");

                    b.Property<double>("EngineLoad")
                        .HasColumnType("double precision");

                    b.Property<double>("EnginePressure")
                        .HasColumnType("double precision");

                    b.Property<double>("EngineSpeed")
                        .HasColumnType("double precision");

                    b.Property<double>("EngineTemperature")
                        .HasColumnType("double precision");

                    b.Property<double>("EngineVibration")
                        .HasColumnType("double precision");

                    b.Property<double>("Fuel")
                        .HasColumnType("double precision");

                    b.Property<int>("RoadTypeId")
                        .HasColumnType("integer");

                    b.Property<double>("Speed")
                        .HasColumnType("double precision");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<double>("TirePressure")
                        .HasColumnType("double precision");

                    b.Property<double>("TireTemperature")
                        .HasColumnType("double precision");

                    b.Property<double>("TireTreadDepth")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("DumpTruckId");

                    b.HasIndex("RoadTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("pointers", "mining_truck");
                });

            modelBuilder.Entity("MonitoringDumpTruck.Models.Entities.RoadType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("road_types", "mining_truck");
                });

            modelBuilder.Entity("MonitoringDumpTruck.Models.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("roles", "mining_truck");
                });

            modelBuilder.Entity("MonitoringDumpTruck.Models.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("statutes", "mining_truck");
                });

            modelBuilder.Entity("MonitoringDumpTruck.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("users", "mining_truck");
                });

            modelBuilder.Entity("MonitoringDumpTruck.Models.Entities.WorkingHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DumpTruckId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DumpTruckId");

                    b.ToTable("working_hours", "mining_truck");
                });

            modelBuilder.Entity("MonitoringDumpTruck.Models.Entities.Filling", b =>
                {
                    b.HasOne("MonitoringDumpTruck.Models.Entities.DumpTruck", "DumpTruck")
                        .WithMany("Fillings")
                        .HasForeignKey("DumpTruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DumpTruck");
                });

            modelBuilder.Entity("MonitoringDumpTruck.Models.Entities.Pointer", b =>
                {
                    b.HasOne("MonitoringDumpTruck.Models.Entities.DumpTruck", "DumpTruck")
                        .WithMany()
                        .HasForeignKey("DumpTruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonitoringDumpTruck.Models.Entities.RoadType", "RoadType")
                        .WithMany("Pointers")
                        .HasForeignKey("RoadTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonitoringDumpTruck.Models.Entities.Status", "Status")
                        .WithMany("Pointers")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DumpTruck");

                    b.Navigation("RoadType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MonitoringDumpTruck.Models.Entities.User", b =>
                {
                    b.HasOne("MonitoringDumpTruck.Models.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MonitoringDumpTruck.Models.Entities.WorkingHour", b =>
                {
                    b.HasOne("MonitoringDumpTruck.Models.Entities.DumpTruck", "DumpTruck")
                        .WithMany("WorkingHours")
                        .HasForeignKey("DumpTruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DumpTruck");
                });

            modelBuilder.Entity("MonitoringDumpTruck.Models.Entities.DumpTruck", b =>
                {
                    b.Navigation("Fillings");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("MonitoringDumpTruck.Models.Entities.RoadType", b =>
                {
                    b.Navigation("Pointers");
                });

            modelBuilder.Entity("MonitoringDumpTruck.Models.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MonitoringDumpTruck.Models.Entities.Status", b =>
                {
                    b.Navigation("Pointers");
                });
#pragma warning restore 612, 618
        }
    }
}
